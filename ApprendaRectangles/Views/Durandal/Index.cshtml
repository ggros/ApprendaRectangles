@using System.Web.Optimization
<!DOCTYPE html>
<html>
<head>
    <title>Apprenda Test</title>

    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link rel="apple-touch-startup-image" href="~/Content/images/ios-startup-image-landscape.png" media="(orientation:landscape)" />
    <link rel="apple-touch-startup-image" href="~/Content/images/ios-startup-image-portrait.png" media="(orientation:portrait)" />
    <link rel="apple-touch-icon" href="~/Content/images/icon.png" />

    @Styles.Render("~/Content/css")

    <script type="text/javascript">
        if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
            var msViewportStyle = document.createElement("style");
            var mq = "@@-ms-viewport{width:auto!important}";
            msViewportStyle.appendChild(document.createTextNode(mq));
            document.getElementsByTagName("head")[0].appendChild(msViewportStyle);
        }

    </script>
    <script src="~/Scripts/easeljs-0.6.0.min.js"></script>
</head>
<body>
    <div id="applicationHost">
        @Html.Partial("_splash")
    </div>

    @Scripts.Render("~/scripts/vendor")
    <script type="text/javascript">
        
        ko.bindingHandlers.rectA = {
            shape1: null,
            shape2: null,
            doupdate: true,
            init: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                var modelValue = valueAccessor(), unwrappedValue = ko.utils.unwrapObservable(modelValue);


                var stageWidth = 640;
                var stageHeight = 480;
                
                var stage = new createjs.Stage(element);
                shape1 = new createjs.Shape();
                shape2 = new createjs.Shape();
                stage.enableMouseOver();
                var pressHandler = function (e) {
                    e.onMouseMove = function (ev) {
                        e.target.x = ev.stageX;
                        e.target.y = ev.stageY;
                        modelValue.rect1.left(ev.stageX);
                        modelValue.rect1.top(ev.stageY);
                        doupdate = true;
                    };
                };
                var pressHandler2 = function (e) {
                    e.onMouseMove = function (ev) {
                        e.target.x = ev.stageX;
                        e.target.y = ev.stageY;
                        modelValue.rect2.left(ev.stageX);
                        modelValue.rect2.top(ev.stageY);
                        doupdate = true;
                    };
                };
                //rectangle 1
                shape1.graphics.beginFill(createjs.Graphics.getRGB(0, 255, 0));
                shape1.graphics.rect(0, 0, modelValue.rect1.width(), modelValue.rect1.height());
                //set origin at 0,0
                shape1.regX = 0;
                shape1.regY = 0;
                shape1.x = modelValue.rect1.left();
                shape1.y = modelValue.rect1.top();
                shape1.onPress = pressHandler;
                stage.addChild(shape1);

                //rectangle 2
                shape2.graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));
                shape2.graphics.rect(0,0,modelValue.rect2.width(), modelValue.rect2.height());
                //set origin at 0,0
                shape2.regX = 0;
                shape2.regY = 0;
                shape2.x = modelValue.rect2.left();
                shape2.y = modelValue.rect2.top();
                shape2.onPress = pressHandler2;
                stage.addChild(shape2);
                
                var tick = function() {
                    //console.log("tick:"+update);
                    if (doupdate) {
                        doupdate = false;
                        stage.update();
                    }
                };

                stage.update();
                createjs.Ticker.addEventListener("tick", tick);
            },
            update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                var value = ko.utils.unwrapObservable(valueAccessor());
                //console.log(value.left());
                //console.log(shape2);
                shape1.x = value.rect1.left();
                shape1.y = value.rect1.top();
                shape1.graphics.clear();
                shape1.graphics.beginFill(createjs.Graphics.getRGB(0, 255, 0));
                shape1.graphics.rect(0, 0, value.rect1.width(), value.rect1.height());
                shape1.graphics.endFill();

                shape2.x = value.rect2.left();
                shape2.y = value.rect2.top();
                shape2.graphics.clear();
                shape2.graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));
                shape2.graphics.rect(0, 0, value.rect2.width(), value.rect2.height());
                shape2.graphics.endFill();
                doupdate = true;
            }
        };
        
    </script>

    @if (HttpContext.Current.IsDebuggingEnabled)
    {
        <script type="text/javascript" src="~/App/durandal/amd/require.js" data-main="@Url.Content("~/App/main")"></script>
    }
    else
    {
        <script type="text/javascript" src="~/App/main-built.js"></script>
    }
</body>
</html>
